################################################
################ Basic movement ################
################################################

# w/e/b/ge
These are all small words.

# W/E/B/gE
"Big" words are words.like.this() (Think chained functions, or jumping over punctuation)

# 0/^/$
beginning of the line / end of the line
    what about white space?

# gg / G
jump to the beginning of the file with gg
jump to the end of the file with G

# C-o / C-i
move back in the jumplist with Ctrl-o
move forward in the jumplist with Ctrl-i

# f/F/t/T
move forward to the letter you want with f
move backward to the letter you want with F
move up until some character with t
move back until some character with T

# {  }
navigate bodies of text
or "paragraphs" with ease
with either { or }

# (  )
You can navigate sentences too. Try ( or ). I've found this is much less helpful in code however.

# /
Use / to start a forward search, ? to start a backward search
n will take you to the next occurence, N to the previous



################################################
################ Insert mode ###################
################################################

# i, I
Use i to insert to the left of the cursor.
Use I to insert at the beginning of the line.

# a, A
Use a to insert to the right of the cursor.
Use A to insert at the end of the line.


# o, O
lower case `o` will create a new line under the current line and put you into insert mode.
upper case 'O' will create a new line above the current line and enter insert mode.



################################################
################### Verbs ######################
################################################

# y, yy
"Yank" text with `y`. Most widely known for the `yy` command to copy the current line.

# p, P
Paste text with `p`.

# d, dd, D
Delete text with d. `d` by itself requires a movement (or text object), but you can `dd` to delete a line, or `D` to delete to the end of the line.

---- The three commands above can take a register to "save" the text into. -----
Access registers with the " command, followed by the register you want to use.

ex: "kdd will delete the current line and put it into register k.
    "kp will paste from that register.

# v, V
Enter visual mode to select text using `v`.

You can also select
lines of text with `V`

# c, cc, C
The change verb. Is equivalent to delete followed by insert, but does it in one motion (which is very important)



#######################################################
# Text Objects (and other fun ways to chain commands) #
#######################################################

All commands above can be prepended with a count

# 3dd
  delete
  delete
  delete

# 2p

# 5ihi<esc>

They can also be followed up by a movement

# ctC
PostsController <- rename to Users

# dt)
def i_only_take_one_arg(arg1, arg2)

# dw
Delete just the first word.

# 2dw
Delete two words

# c}
Change
this paragraph
to gibberish

# i and a

# iw / aw
Visually select this little word with viw

Delete around a word (including white space) with daw

# iW / aW
This is a Big.word

# i" / a"
let string = "Change me."
string2 = 'I work too.'

# i( / a(
def function_with_some_args(args1, args2, args3)

# i{ 
function() {
  let badcode = ...
  we_really_oughta_rewrite_all_this;
}

# ip / ap

def function_b
  some_func()
end

def function_a
  some_other_func()
end

# i] / a[
some_array[i + 2]

# i> / it
You can even manipulate html <strong> tags! </strong>

You can also define new text objects because Vim is awesome (but you need a plugin for it).
